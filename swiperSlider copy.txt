"use client";

import { NavLink } from "react-router-dom";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination, Autoplay } from "swiper/modules";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "swiper/css";

import { useGetTourPlanPublicQuery } from "@/redux/features/baseApi";

import Card from "@/components/ui/Card";
import BeachCard from "@/components/ui/BeachCard";
import MountainCard from "@/components/ui/MountainCard";
import RelaxCard from "@/components/ui/RelaxCard";
import GroupCard from "@/components/ui/GroupCard";
import { useRef } from "react";
import { ArrowBigRight, ArrowLeft, ArrowRight } from "lucide-react";

const Published = () => {
  const prevRef = useRef(null);
  const nextRef = useRef(null);
  const beachPrevRef = useRef(null);
const beachNextRef = useRef(null);
const mountainPrevRef = useRef(null);
const mountainNextRef = useRef(null);
const relaxPrevRef = useRef(null);
const relaxNextRef = useRef(null);
  const {
    data: publishedData = [],
    isLoading,
    isError,
  } = useGetTourPlanPublicQuery();

  const beachTrips = publishedData?.filter(
    (p) => p.destination_type?.trim().toLowerCase() === "beach"
  );
  console.log({ beachTrips });
  const mountainTrips = publishedData.filter(
    (p) => p.destination_type?.trim().toLowerCase() === "mountain"
  );
  console.log({ mountainTrips });
  const relaxTrips = publishedData.filter(
    (p) => p.travel_type?.trim().toLowerCase() === "relax"
  );
  console.log({ relaxTrips });
  const groupTrips = publishedData.filter(
    (p) => p.travel_type?.trim().toLowerCase() === "group"
  );
  console.log({ groupTrips });

  // const sliderSettings = {
  //   dots: true,
  //   infinite: publishedData.length > 2,
  //   speed: 500,
  //   slidesToShow: 3,
  //   slidesToScroll: 1,
  //   arrows: true,
  //   responsive: [
  //     {
  //       breakpoint: 1024,
  //       settings: {
  //         slidesToShow: 2,
  //         slidesToScroll: 1,
  //         infinite: true,
  //         dots: true,
  //         arrows: true,
  //       },
  //     },
  //     {
  //       breakpoint: 640,
  //       settings: {
  //         slidesToShow: 2,
  //         slidesToScroll: 2,
  //         infinite: true,
  //         dots: true,
  //         arrows: false,
  //         variableWidth: true,
  //       },
  //     },
  //     {
  //       breakpoint: 480,
  //       settings: {
  //         slidesToShow: 1,
  //         slidesToScroll: 1,
  //         infinite: true,
  //         dots: true,
  //         arrows: false,
  //         variableWidth: true,
  //       },
  //     },
  //   ],
  // };

  // const getSliderSettings = (length) => ({
  //   dots: false,
  //   infinite: length > 3,
  //   speed: 500,
  //   slidesToShow: 3,
  //   slidesToScroll: 1,
  //   arrows: true,
  //   responsive: [
  //     {
  //       breakpoint: 1024,
  //       settings: {
  //         slidesToShow: 3,
  //         slidesToScroll: 1,
  //         infinite: length > 2,
  //         dots: false,
  //         arrows: true,
  //       },
  //     },
  //     {
  //       breakpoint: 640,
  //       settings: {
  //         slidesToShow: 1.5,
  //         slidesToScroll: 1,
  //         infinite: length > 1,
  //         dots: false,
  //         arrows: false,
  //         variableWidth: false,
  //       },
  //     },
  //     {
  //       breakpoint: 480,
  //       settings: {
  //         slidesToShow: 2,
  //         slidesToScroll: 1,
  //         infinite: length > 1,
  //         dots: false,
  //         arrows: false,
  //         variableWidth: false,
  //       },
  //     },
  //   ],
  // });

  const getSliderSettings = (length) => ({
    dots: true, // change from false to true
    infinite: length > 3,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 1,
    arrows: true,
    swipe: true, // ✅ enables swipe
    touchMove: true, // ✅ enables smooth touch interaction
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
          infinite: length > 2,
          dots: true, // change from false to true
          arrows: true,
        },
      },
      {
        breakpoint: 640,
        settings: {
          slidesToShow: 1.5,
          slidesToScroll: 1,
          infinite: length > 1,
          dots: true, // change from false to true
          arrows: false,
          variableWidth: false,
          swipe: true,
          touchMove: true,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
          infinite: length > 1,
          dots: true, // change from false to true
          arrows: false,
          variableWidth: false,
          swipe: true,
          touchMove: true,
        },
      },
    ],
  });

  return (
    <div className="pb-8 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-white to-[#4691F2]/10">
      <style jsx>{`
        .slick-slide > div {
          display: flex;
          align-items: stretch;
        }
        .slick-track {
          display: flex !important;
          align-items: stretch !important;
        }
        .slick-slide {
          height: auto !important;
        }
      `}</style>

      {/* .slick-dots {
        display: none !important;
      } */}

      <div className="text-center py-1 mb-6 sm:py-12 lg:py-16">
        <p className="text-gray-700 text-[13px] md:text-lg lg:mb-4 font-medium">
          Top Requests are here
        </p>
        <h1 className="text-2xl md:text-4xl lg:text-5xl font-semibold text-[#3F4C65]">
          Last Request Published
        </h1>
      </div>

      <div className="max-w-7xl mx-auto">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent"></div>
          </div>
        ) : isError ? (
          <div className="text-center text-red-500 py-8">
            Error loading tour plans. Please try again later.
          </div>
        ) : publishedData.length === 0 ? (
          <div className="text-center text-gray-600 py-8">
            No tour plans available at the moment.
          </div>
        ) : (
          <>
            {beachTrips.length > 0 && (
  <div className="mb-4">
    <h2 className="text-2xl font-bold text-black mb-4">Beach Trips</h2>

    <div className="relative">
      <button
        ref={beachPrevRef}
        className="absolute top-1/2 -left-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowLeft />
      </button>

      <button
        ref={beachNextRef}
        className="absolute top-1/2 -right-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowRight />
      </button>

      <Swiper
        modules={[Pagination, Navigation]}
        spaceBetween={0}
        pagination={{ clickable: true }}
        navigation={{
          prevEl: beachPrevRef.current,
          nextEl: beachNextRef.current,
        }}
        onBeforeInit={(swiper) => {
          swiper.params.navigation.prevEl = beachPrevRef.current;
          swiper.params.navigation.nextEl = beachNextRef.current;
        }}
        breakpoints={{
          760: { slidesPerView: 3 },
          480: { slidesPerView: 2 },
          320: { slidesPerView: 2 },
        }}
        loop={true}
      >
        {beachTrips.map((p) => (
          <SwiperSlide key={p.id} className="px-2 mb-12">
            <BeachCard tourPlan={p} />
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  </div>
)}


           {mountainTrips.length > 0 && (
  <div className="mb-4">
    <h2 className="text-2xl font-bold text-black mb-4">Mountain Adventures</h2>

    <div className="relative">
      <button
        ref={mountainPrevRef}
        className="absolute top-1/2 -left-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowLeft />
      </button>

      <button
        ref={mountainNextRef}
        className="absolute top-1/2 -right-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowRight />
      </button>

      <Swiper
        modules={[Pagination, Navigation]}
        spaceBetween={0}
        pagination={{ clickable: true }}
        navigation={{
          prevEl: mountainPrevRef.current,
          nextEl: mountainNextRef.current,
        }}
        onBeforeInit={(swiper) => {
          swiper.params.navigation.prevEl = mountainPrevRef.current;
          swiper.params.navigation.nextEl = mountainNextRef.current;
        }}
        breakpoints={{
          760: { slidesPerView: 3 },
          480: { slidesPerView: 2 },
          320: { slidesPerView: 2 },
        }}
        loop={true}
      >
        {mountainTrips.map((p) => (
          <SwiperSlide key={p.id} className="px-2 mb-12">
            <MountainCard tourPlan={p} />
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  </div>
)}


          {relaxTrips.length > 0 && (
  <div className="mb-4">
    <h2 className="text-2xl font-bold text-black mb-4">Relaxing Tours</h2>

    <div className="relative">
      <button
        ref={relaxPrevRef}
        className="absolute top-1/2 -left-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowLeft />
      </button>

      <button
        ref={relaxNextRef}
        className="absolute top-1/2 -right-10 z-10 hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center border rounded-full shadow"
        style={{ transform: "translateY(-50%)" }}
      >
        <ArrowRight />
      </button>

      <Swiper
        modules={[Pagination, Navigation]}
        spaceBetween={0}
        pagination={{ clickable: true }}
        navigation={{
          prevEl: relaxPrevRef.current,
          nextEl: relaxNextRef.current,
        }}
        onBeforeInit={(swiper) => {
          swiper.params.navigation.prevEl = relaxPrevRef.current;
          swiper.params.navigation.nextEl = relaxNextRef.current;
        }}
        breakpoints={{
          760: { slidesPerView: 3 },
          480: { slidesPerView: 2 },
          320: { slidesPerView: 2 },
        }}
        loop={true}
      >
        {relaxTrips.map((p) => (
          <SwiperSlide key={p.id} className="px-2 mb-12">
            <RelaxCard tourPlan={p} />
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  </div>
)}

            {groupTrips.length > 0 && (
              <div className="">
                <h2 className="text-2xl font-bold text-black mb-4">
                  Group Packages
                </h2>

                <div className="relative">
                  {/* Custom arrows */}
                  <button
                    ref={prevRef}
                    title="Previous"
                    className="absolute  top-1/2 -left-10 z-10 cursor-pointer hidden lg:flex w-10 h-10 items-center bg-white text-black justify-center  border rounded-full shadow"
                    style={{ transform: "translateY(-50%)" }}
                  >
                    <ArrowLeft />
                  </button>

                  <button
                    ref={nextRef}
                    title="Next"
                    className="absolute cursor-pointer top-1/2 -right-10 z-10 hidden lg:flex w-10 h-10 items-center justify-center bg-white border rounded-full shadow"
                    style={{ transform: "translateY(-50%)" }}
                  >
                    <ArrowRight />
                  </button>

                  <Swiper
                    modules={[Pagination, Navigation]}
                    spaceBetween={0}
                    pagination={{ clickable: true }}
                    loop={true}
                    navigation={{
                      prevEl: prevRef.current,
                      nextEl: nextRef.current,
                    }}
                    onBeforeInit={(swiper) => {
                      swiper.params.navigation.prevEl = prevRef.current;
                      swiper.params.navigation.nextEl = nextRef.current;
                    }}
                    breakpoints={{
                      760: {
                        slidesPerView: 3,
                        slidesPerGroup: 1,
                      },
                      480: {
                        slidesPerView: 2,
                        slidesPerGroup: 1,
                      },
                      320: {
                        slidesPerView: 2,
                        slidesPerGroup: 1,
                      },
                    }}
                  >
                    {groupTrips.map((p) => (
                      <SwiperSlide key={p.id} className="px-2 mb-12">
                        <GroupCard tourPlan={p} />
                      </SwiperSlide>
                    ))}
                  </Swiper>
                </div>
              </div>
            )}
          </>
        )}
      </div>

      <NavLink to="/viewall" className="flex justify-center mt-2">
        <h1 className="w-5/6 md:w-auto h-[48px] bg-gray-300 md:bg-transparent rounded-2xl py-2 mt-6 font-medium text-base sm:text-lg lg:text-[19px] text-blue-500 underline text-center cursor-pointer">
          see more
        </h1>
      </NavLink>
    </div>
  );
};

export default Published;























@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&display=swap");
@import "tailwindcss";
@import "tw-animate-css";
@plugin "daisyui";

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}
:root {
  --font-roboto: "Roboto", sans-serif;
  --font-nunito-sans: "Nunito Sans", sans-serif;
  --font-open-sans: "Open Sans", sans-serif;
  --radius: 0.5rem;
  --background: oklch(0.975 0.005 240);
  --foreground: oklch(0.37 0.025 240);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.57 0.18 260); /* Primary background: Blue (#3776E2) */
  --primary-foreground: oklch(
    0.98 0.003 240
  ); /* Primary foreground: Off-white (#FAFAFA) */
  --secondary: oklch(
    0.92 0.015 240
  ); /* Secondary background: Light gray (#E6EAF0) */
  --secondary-foreground: oklch(
    0.35 0.02 240
  ); /* Secondary foreground: Dark gray (#2E3845) */
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.57 0.18 260);
  --accent-foreground: oklch(0.98 0.003 240);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.57 0.18 260); /* Primary background: Blue (#3776E2) */
  --primary-foreground: oklch(
    0.98 0.003 240
  ); /* Primary foreground: Off-white (#FAFAFA) */
  --secondary: oklch(
    0.92 0.015 240
  ); /* Secondary background: Light gray (#E6EAF0) */
  --secondary-foreground: oklch(
    0.35 0.02 240
  ); /* Secondary foreground: Dark gray (#2E3845) */
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-[#F8F9FA] text-foreground;
  }

  #root {
    text-rendering: optimizeLegibility;
    cursor: default;
  }

  .row {
    @apply w-[calc(100%-2rem)] mx-auto max-w-[120rem];
  }

  .swiper-container {
    position: relative; /* Ensure Swiper wrapper has relative positioning */
  }

  .swiper-button-prev,
  .swiper-button-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    @apply w-12 h-12 lg:w-20 lg:h-20 rounded-full flex items-center justify-center p-2 z-10 hidden lg:flex;
    --swiper-navigation-size: 28px;
  }

  .swiper-button-prev {
    left: -80px; /* Adjust as needed */
  }

  .swiper-button-next {
    right: -80px; /* Adjust as needed */
  }

  .swiper-button-prev:after,
  .swiper-button-next:after {
    @apply text-black;
  }
}





@custom-variant dark (&:is(.dark *));

.slick-prev,
.slick-next {
  /* background: #3c76dc; Match button color */
  z-index: 10;
}










import { Star } from "lucide-react";
import { Link } from "react-router-dom";

export default function BeachCard({ tourPlan }) {
  console.log({ tourPlan });
  return (
    
<Link
  to={`/tour-plans/${tourPlan.id}`}
  className="flex flex-col shadow-md w-full p-1 sm:max-w-sm mx-auto sm:mx-2 overflow-hidden rounded-2xl border transition-shadow duration-300"
>
  <div className="relative  ">
    <div className="aspect-[4/3] overflow-hidden ">
      <img
        src={tourPlan.spot_picture_url || "/images/beach-placeholder.jpg"}
        alt="Beach destination"
        className="w-full h-full object-cover hover:scale-105 transition-transform duration-300 rounded-xl"
      />
    </div>
    <div className="absolute top-2 left-3 bg-sky-100 text-sky-800 font-semibold px-3 py-1 text-[14px] rounded">
      {
        tourPlan?.destination_type
      }
    </div>
  </div>

  <div className="flex flex-col justify-between flex-grow p-3 sm:p-4 bg-white h-full">
    <h3 className="font-semibold text-gray-900 text-sm sm:text-[16px] truncate">
      {tourPlan.location_to}
    </h3>

    <div className="mt-2">
      <div className="text-gray-900 font-semibold text-sm sm:text-base">
        ${tourPlan.budget}
      </div>

      <div className="flex justify-between items-center mt-1">
        <span className="text-gray-600 text-[14px]">
          {tourPlan.total_members}{" "}
          {tourPlan.total_members > 1 ? "people" : "person"}
        </span>

        <div className="flex items-center gap-1">
          <Star className="w-3 h-3 sm:w-4 sm:h-4 text-yellow-500 fill-yellow-500" />
          <span className="text-[14px] font-medium text-gray-900">
            {tourPlan.like_count}
          </span>
        </div>
      </div>
    </div>
  </div>
</Link>


  );
}
















